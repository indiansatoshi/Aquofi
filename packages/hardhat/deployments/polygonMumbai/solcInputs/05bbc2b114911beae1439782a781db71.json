{
  "language": "Solidity",
  "sources": {
    "contracts/Valuations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Valuations {\n    address public owner;\n    \n    struct RWAData {\n        string rwaDesc;\n        string rwaPriceDate;\n        string rwaCurrency;\n        string rwaId;\n        uint256 valuation;\n    }\n    \n    mapping(address => bool) public signers;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function setOwner(address _owner) external onlyOwner {\n        owner = _owner;\n    }\n    \n    function setSigner(address _signer, bool _status) external onlyOwner {\n        signers[_signer] = _status;\n        emit SignerStatusChanged(_signer, _status);\n    }\n    \n    function submitRWAData(\n        string memory _rwaDesc,\n        string memory _rwaPriceDate,\n        string memory _rwaCurrency,\n        string memory _rwaId,\n        uint256 _valuation\n    ) external {\n        require(signers[msg.sender], \"Only approved signers can submit data\");\n        \n        // Store the RWA data on the blockchain\n        // You can store it in any desired format or emit an event\n        \n        // For demonstration, let's just emit an event with the data\n        emit RWADataSubmitted(_rwaDesc, _rwaPriceDate, _rwaCurrency, _rwaId, _valuation);\n    }\n    \n    event SignerStatusChanged(address signer, bool status);\n    \n    event RWADataSubmitted(\n        string rwaDesc,\n        string rwaPriceDate,\n        string rwaCurrency,\n        string rwaId,\n        uint256 valuation\n    );\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}